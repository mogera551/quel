const e="*",t="dot-notation",a={directlyGet:Symbol.for(t+".direct_get"),directlySet:Symbol.for(t+".direct_set"),isSupportDotNotation:Symbol.for(t+".is_support_dot_notation")},s=new RegExp(/^\$([0-9]+)$/);class r{#e;get name(){return this.#e}#t;get pathNames(){return this.#t}#a;get parentPathNames(){return this.#a}#s;get parentPath(){return this.#s}#r;get parentPaths(){return this.#r}#n;get setOfParentPaths(){return this.#n}#i;get lastPathName(){return this.#i}#h;get regexp(){return this.#h}#p;get level(){return this.#p}#o;get isPrimitive(){return this.#o}#c;get nearestWildcardName(){return this.#c}#l;get nearestWildcardParentName(){return this.#l}constructor(t){if(this.#e=t,this.#t=t.split("."),this.#a=this.#t.slice(0,-1),this.#r=this.#a.reduce(((e,t)=>(e.push(e.at(-1)?.concat(t)??[t]),e)),[]).map((e=>e.join("."))),this.#n=new Set(this.#r),this.#s=this.#a.join("."),this.#i=this.#t.at(-1),this.#h=new RegExp("^"+t.replaceAll(".","\\.").replaceAll("*","([0-9a-zA-Z_]*)")+"$"),this.#p=this.#t.reduce(((t,a)=>t+(a===e?1:0)),0),this.#o=1===this.#t.length,this.#c=void 0,this.#l=void 0,this.#p>0)for(let t=this.#t.length-1;t>=0;t--)if(this.#t[t]===e){this.#c=this.#t.slice(0,t+1).join("."),this.#l=this.#t.slice(0,t).join(".");break}}static create(e){const t=this.#m.get(e);if(void 0!==t)return t;const a=new r(e);return this.#m.set(e,a),a}static#m=new Map;static get propertyNameByName(){return this.#m}static parse(e){const t=[],a=[];for(const s of e.split(".")){const e=Number(s);isNaN(e)?a.push(s):(t.push(e),a.push("*"))}return{propName:r.create(a.join(".")),indexes:t}}}const n={[a.directlyGet]:(e,t,a)=>(s,r)=>Reflect.apply(e.directlyGet,e,[t,{prop:s,indexes:r},a]),[a.directlySet]:(e,t,a)=>(s,r,n)=>Reflect.apply(e.directlySet,e,[t,{prop:s,indexes:r,value:n},a]),[a.isSupportDotNotation]:(e,t,a)=>!0};class i{#d=[];#N=new Map;get lastIndexes(){return this.#d[this.#d.length-1]}get stackIndexes(){return this.#d}get matchByName(){return this.#N}getByPropertyName(t,{propName:a},s){const n=Reflect.get(t,a.name,s);if(void 0!==n)return n;if(""!==a.parentPath){const n=r.create(a.parentPath),i=this.getByPropertyName(t,{propName:n},s);if(void 0!==i){return i[a.lastPathName===e?this.lastIndexes[a.level-1]:a.lastPathName]}}}setByPropertyName(t,{propName:a,value:s},n){let i=!1;if(Reflect.has(t,a.name)||a.isPrimitive)i=Reflect.set(t,a.name,s,n);else{const h=r.create(a.parentPath),p=this.getByPropertyName(t,{propName:h},n);if(void 0!==p){p[a.lastPathName===e?this.lastIndexes[a.level-1]:a.lastPathName]=s,i=!0}}return i}#u(e,t){this.#d.push(e);try{return Reflect.apply(t,this,[])}finally{this.#d.pop()}}#y=(e,t)=>({propName:a,indexes:s})=>this.#u(s,(()=>this.getByPropertyName(e,{propName:a},t)));#g=(e,t)=>({propName:a,indexes:s},r)=>this.#u(s,(()=>this.setByPropertyName(e,{propName:a,value:r},t)));#x(e,{propName:t,indexes:a},s){const n=this.#y(e,s);if(void 0===t.nearestWildcardName)throw new Error(`not found wildcard path of '${t.name}'`);const i=r.create(t.nearestWildcardParentName);return n({propName:i,indexes:a}).map(((e,s)=>n({propName:t,indexes:a.concat(s)})))}#P(e,{propName:t,indexes:a,values:s},n){const i=this.#y(e,n),h=this.#g(e,n);if(void 0===t.nearestWildcardName)throw new Error(`not found wildcard path of '${t.name}'`);const p=r.create(t.nearestWildcardParentName),o=i({propName:p,indexes:a}),c=Array.isArray(s)?s:[...Array(o.length)].map((e=>s));if(t.nearestWildcardName===t.name)h({propName:p,indexes:a},c);else{if(c.length!==o.length)throw new Error(`not match array count '${t.name}'`);for(let e in o)h({propName:t,indexes:a.concat(Number(e))},c[e])}return!0}directlyGet(e,{prop:t,indexes:a},s){const n=r.create(t);return this.#u(a,(()=>this.getByPropertyName(e,{propName:n},s)))}directlySet(e,{prop:t,indexes:a,value:s},n){const i=r.create(t);return this.#u(a,(()=>this.setByPropertyName(e,{propName:i,value:s},n)))}get(e,t,a){const i="string"==typeof t;if(i&&(t.startsWith("@@__")||"constructor"===t))return Reflect.get(e,t,a);const h=n[t];if(void 0!==h)return h(this,e,a);const p=this.#y(e,a),o=this.lastIndexes;let c;if(i){if("$"===t[0]&&(c=s.exec(t)))return o?.[Number(c[1])-1]??void 0;if("@"===t[0]){const s=t.slice(1),n=r.create(s);if((o?.length??0)+1<n.level)throw new Error("array level not match");const i=o?.slice(0,n.level-1)??[];return this.#x(e,{propName:n,indexes:i},a)}if(void 0!==this.#N.get(t))return p(this.#N.get(t));{const e=r.parse(t);return e.propName.level===e.indexes.length?(this.#N.set(t,e),p(e)):p({propName:e.propName,indexes:e.indexes.concat(o?.slice(e.indexes.length)??[])})}}return Reflect.get(e,t,a)}set(e,t,a,s){if("string"==typeof t){if(t.startsWith("@@__")||"constructor"===t)return Reflect.set(e,t,a,s);const n=this.#g(e,s),i=this.lastIndexes;if("@"===t.at(0)){const n=t.slice(1),i=r.create(n);if((this.lastIndexes?.length??0)+1<i.level)throw new Error("array level not match");const h=this.lastIndexes?.slice(0,i.level-1)??[];return this.#P(e,{propName:i,indexes:h,values:a},s)}if(this.#N.has(t))return n(this.#N.get(t),a);const h=r.parse(t);return h.propName.level===h.indexes.length?(this.#N.set(t,h),n(h,a)):n({propName:h.propName,indexes:h.indexes.concat(i?.slice(h.indexes.length)??[])},a)}return Reflect.set(e,t,a,s)}}export{i as Handler,r as PropertyName,s as RE_CONTEXT_INDEX,a as Symbols};
