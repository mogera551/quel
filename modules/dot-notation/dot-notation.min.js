const e="*",t="dot-notation",s={directlyGet:Symbol.for(t+".direct_get"),directlySet:Symbol.for(t+".direct_set"),isSupportDotNotation:Symbol.for(t+".is_support_dot_notation")},a=new RegExp(/^\$([0-9]+)$/);class r{name;pathNames=[];parentPathNames=[];parentPath;parentPaths=[];setOfParentPaths;regexp;level=0;isPrimitive;constructor(t){this.name=t,this.pathNames=t.split("."),this.parentPathNames=this.pathNames.slice(0,-1),this.parentPaths=this.parentPathNames.reduce(((e,t)=>(e.push(e.at(-1)?.concat(t)??[t]),e)),[]).map((e=>e.join("."))),this.setOfParentPaths=new Set(this.parentPaths),this.parentPath=this.parentPathNames.join("."),this.lastPathName=this.pathNames.at(-1),this.regexp=new RegExp("^"+t.replaceAll(".","\\.").replaceAll("*","([0-9a-zA-Z_]*)")+"$"),this.level=this.pathNames.filter((t=>t===e)).length,this.isPrimitive=1===this.pathNames.length}findNearestWildcard(){return r.findNearestWildcard(this)}static findNearestWildcard(t){let s=t;for(;;){if(s.lastPathName===e)return s;if(""===s.parentPath)return;s=r.create(s.parentPath)}}static create(e){const t=this.propertyNameByName.get(e);if(t)return t;const s=new r(e);return this.propertyNameByName.set(e,s),s}static propertyNameByName=new Map;static parse(e){const t=[],s=[];for(const a of e.split(".")){const e=Number(a);isNaN(e)?s.push(a):(t.push(e),s.push("*"))}return{propName:r.create(s.join(".")),indexes:t}}}class n{#e=[];#t=new Map;get lastIndexes(){return this.#e[this.#e.length-1]}get stackIndexes(){return this.#e}get matchByName(){return this.#t}getByPropertyName(t,{propName:s},a){let n;if(Reflect.has(t,s.name))n=Reflect.get(t,s.name,a);else if(""!==s.parentPath){const i=r.create(s.parentPath),h=this.getByPropertyName(t,{propName:i},a);if(void 0!==h){const t=s.lastPathName===e?this.lastIndexes[s.level-1]:s.lastPathName;n=Reflect.get(h,t)}}return n}setByPropertyName(t,{propName:s,value:a},n){let i=!1;if(Reflect.has(t,s.name)||s.isPrimitive)i=Reflect.set(t,s.name,a,n);else{const h=r.create(s.parentPath),p=this.getByPropertyName(t,{propName:h},n);if(void 0!==p){const t=s.lastPathName===e?this.lastIndexes[s.level-1]:s.lastPathName;i=Reflect.set(p,t,a)}}return i}pushIndexes(e,t){this.#e.push(e);try{return Reflect.apply(t,this,[])}finally{this.#e.pop()}}getFunc=(e,t)=>({propName:s,indexes:a})=>this.pushIndexes(a,(()=>this.getByPropertyName(e,{propName:s},t)));setFunc=(e,t)=>({propName:s,indexes:a},r)=>this.pushIndexes(a,(()=>this.setByPropertyName(e,{propName:s,value:r},t)));getExpandLastLevel(e,{propName:t,indexes:s},a){const n=this.getFunc(e,a),i=t.findNearestWildcard();if(!i)throw new Error(`not found wildcard path of '${t.name}'`);const h=r.create(i.parentPath);return n({propName:h,indexes:s}).map(((e,a)=>n({propName:t,indexes:s.concat(a)})))}setExpandLastLevel(e,{propName:t,indexes:s,values:a},n){const i=this.getFunc(e,n),h=this.setFunc(e,n),p=t.findNearestWildcard();if(!p)throw new Error(`not found wildcard path of '${t.name}'`);const o=r.create(p.parentPath),c=i({propName:o,indexes:s});if(p.name===t.name)h({propName:o,indexes:s},a);else{if(a.length!==c.length)throw new Error(`not match value count '${t.name}'`);for(let e in c)h({propName:t,indexes:s.concat(Number(e))},a[e])}return!0}[s.directlyGet](e,{prop:t,indexes:s},a){const n=r.create(t);return this.pushIndexes(s,(()=>this.getByPropertyName(e,{propName:n},a)))}[s.directlySet](e,{prop:t,indexes:s,value:a},n){const i=r.create(t);return this.pushIndexes(s,(()=>this.setByPropertyName(e,{propName:i,value:a},n)))}get(e,t,n){if("string"==typeof t&&(t.startsWith("@@__")||"constructor"===t))return Reflect.get(e,t,n);const i=this.getFunc(e,n),h=this.lastIndexes;let p;if(t===s.directlyGet)return(t,a)=>Reflect.apply(this[s.directlyGet],this,[e,{prop:t,indexes:a},n]);if(t===s.directlySet)return(t,a,r)=>Reflect.apply(this[s.directlySet],this,[e,{prop:t,indexes:a,value:r},n]);if(t===s.isSupportDotNotation)return!0;if(p=a.exec(t))return h?.[Number(p[1])-1]??void 0;if("@"===t.at(0)){const s=t.slice(1),a=r.create(s);if((h?.length??0)+1<a.level)throw new Error("array level not match");const i=h?.slice(0,a.level-1)??[];return this.getExpandLastLevel(e,{propName:a,indexes:i},n)}if(this.#t.has(t))return i(this.#t.get(t));const o=r.parse(t);return o.propName.level===o.indexes.length&&this.#t.set(t,o),o.indexes.push(...h?.slice(o.indexes.length)??[]),i(o)}set(e,t,s,a){if("string"==typeof t&&(t.startsWith("@@__")||"constructor"===t))return Reflect.set(e,t,s,a);const n=this.setFunc(e,a),i=this.lastIndexes;if("@"===t.at(0)){const n=t.slice(1),i=r.create(n);if((this.lastIndexes?.length??0)+1<i.level)throw new Error("array level not match");const h=this.lastIndexes?.slice(0,i.level-1)??[];return this.setExpandLastLevel(e,{propName:i,indexes:h,values:s},a)}if(this.#t.has(t))return n(this.#t.get(t),s);const h=r.parse(t);return h.propName.level===h.indexes.length&&this.#t.set(t,h),this.#t.set(t,h),h.indexes.push(...i?.slice(h.indexes.length)??[]),n(h,s)}}export{n as Handler,r as PropertyName,a as RE_CONTEXT_INDEX,s as Symbols};
